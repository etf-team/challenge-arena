"""Initial

Revision ID: 866ba12cad61
Revises: 
Create Date: 2024-10-26 20:09:46.784602

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '866ba12cad61'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('space',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=False),
    sa.Column('invitation_token', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('password_hash', sa.String(), nullable=False),
    sa.Column('full_name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    op.create_table('achievement',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('space_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['space_id'], ['space.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('space_member',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('is_administrator', sa.Boolean(), nullable=False),
    sa.Column('space_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['space_id'], ['space.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('challenge',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('space_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=False),
    sa.Column('prize', sa.String(), nullable=True),
    sa.Column('achievement_id', sa.Integer(), nullable=True),
    sa.Column('is_verification_required', sa.Boolean(), nullable=False),
    sa.Column('is_estimation_required', sa.Boolean(), nullable=False),
    sa.Column('starts_at', sa.DateTime(), nullable=False),
    sa.Column('ends_at_const', sa.DateTime(), nullable=True),
    sa.Column('ends_at_determination_fn', sa.Enum('HIGHER_THAN', 'LESS_THAN', 'HEAD', 'TAIL', name='selectionfnenum'), nullable=False),
    sa.Column('ends_at_determination_argument', sa.Float(), nullable=False),
    sa.Column('cached_current_progress', sa.Integer(), nullable=False),
    sa.Column('results_aggregation_strategy', sa.Enum('SUM', 'AVG', 'MAX', name='aggregationstrategy'), nullable=False),
    sa.Column('prize_determinataion_fn', sa.Enum('HIGHER_THAN', 'LESS_THAN', 'HEAD', 'TAIL', name='selectionfnenum'), nullable=False),
    sa.Column('prize_determination_argument', sa.Float(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint('cached_current_progress >= 0 and cached_current_progress <= 100'),
    sa.ForeignKeyConstraint(['achievement_id'], ['achievement.id'], ),
    sa.ForeignKeyConstraint(['space_id'], ['space.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('achievement_assignation',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('challenge_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['challenge_id'], ['challenge.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('challenge_member',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('challenge_id', sa.Integer(), nullable=False),
    sa.Column('is_referee', sa.Boolean(), nullable=False),
    sa.Column('is_participant', sa.Boolean(), nullable=False),
    sa.Column('is_administrator', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['challenge_id'], ['challenge.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('challenge_result',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('member_id', sa.Integer(), nullable=False),
    sa.Column('submitted_value', sa.Float(), nullable=False),
    sa.Column('estimation_value', sa.Float(), nullable=True),
    sa.Column('verification_value', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['member_id'], ['challenge_member.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('challenge_result')
    op.drop_table('challenge_member')
    op.drop_table('achievement_assignation')
    op.drop_table('challenge')
    op.drop_table('space_member')
    op.drop_table('achievement')
    op.drop_table('user')
    op.drop_table('space')
    # ### end Alembic commands ###
